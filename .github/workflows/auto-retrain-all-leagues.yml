name: Retrain AI Models

on:
  # Only run when there are actual changes - no scheduled runs
  workflow_dispatch:  # Allow manual triggering
  push:
    paths:
      - 'data.sqlite'  # Trigger when database is updated
      - 'retrain_needed.flag'  # Trigger when retraining flag is created

jobs:
  retrain-models:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow pushing changes back to repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check if retraining is needed
      id: check-retrain
      run: |
        if [ -f "retrain_needed.flag" ]; then
          echo "retrain_needed=true" >> $GITHUB_OUTPUT
          echo "ðŸ”„ Retraining flag found - models will be retrained"
          cat retrain_needed.flag
        else
          echo "retrain_needed=false" >> $GITHUB_OUTPUT
          echo "âœ… No retraining needed - no flag file found"
          exit 0
        fi
        
    - name: Retrain models
      if: steps.check-retrain.outputs.retrain_needed == 'true'
      run: |
        echo "ðŸ¤– Retraining AI models with optimized training..."
        python scripts/train_models_optimized.py
        
    - name: Clean up retraining flag
      if: always()
      run: |
        if [ -f "retrain_needed.flag" ]; then
          rm retrain_needed.flag
          echo "ðŸ§¹ Cleaned up retraining flag file"
        fi
        
    - name: Commit and push all changes
      if: steps.check-retrain.outputs.retrain_needed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data.sqlite artifacts/ artifacts_optimized/ last_checkpoint.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-retrain: Updated AI models with new data [skip ci]"
          git push
        fi
        
    - name: Trigger Streamlit Cloud Redeploy
      if: steps.check-retrain.outputs.retrain_needed == 'true'
      run: |
        echo "ðŸš€ Triggering Streamlit Cloud redeployment..."
        # Create a timestamp file to force Streamlit redeploy
        echo "# Auto-redeploy trigger: $(date)" > .streamlit_redeploy_trigger
        git add .streamlit_redeploy_trigger
        git commit -m "Trigger Streamlit redeploy: Models updated $(date) [skip ci]"
        git push
        echo "âœ… Streamlit Cloud redeployment triggered successfully"
        
    - name: Upload training logs
      if: steps.check-retrain.outputs.retrain_needed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: model-training-logs
        path: |
          model_training.log
          match_detection.log
          auto_update.log
          *.log
